from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

import fsm.fsm
from app import keyboards as kb

from app.keyboards import help_url
from config.config import admin_id

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression

from tools.ML.app import recognize
from data.data_functions import words

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,{message.from_user.first_name.capitalize()}! –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —è –ø–æ—Å—Ç–æ—Ä–∞—é—Å—å –≤–∞–º –ø–æ–º–æ—á—å!\n',
                         reply_markup=kb.main)
    await state.set_state(fsm.fsm.ImgOrText.neutral)


@router.message(F.text == '–ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º üí¨')
async def new_record(message: Message, state: FSMContext):
    await message.answer('–ì—Ä—É—Å—Ç–Ω–æ, —á—Ç–æ —è –Ω–µ —Å–º–æ–≥ –≤–∞–º –ø–æ–º–æ—á—å!üëã\n'
                         '–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n',
                         reply_markup=help_url)

@router.message(Command(commands=['add_questions']))
async def answer_for_user(message: Message, state: FSMContext):
    if message.from_user.id == int(admin_id):
         await message.answer('–í—ã –∑–∞—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞, –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start\n'
                              '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                              '–í–æ–ø—Ä–æ—Å:–û—Ç–≤–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —Å–∏–º–≤–æ–ª ":" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω\n')
         await state.set_state(fsm.fsm.ImgOrText.add)
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω')

@router.message(fsm.fsm.ImgOrText.add)
async def generate_image(message: Message):
    key, values = message.text.split(":")
    words[key] = values
    await message.answer("–ó–∞–ø–∏—Å–∞–ª, –ø—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")



@router.message(fsm.fsm.ImgOrText.neutral)
async def generate_image(message: Message):
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ data_set
    vectorizer = CountVectorizer()
    vectors = vectorizer.fit_transform(list(words.keys()))

    clf = LogisticRegression()
    clf.fit(vectors, list(words.values()))


    await message.answer(recognize(message.text, vectorizer, clf))

